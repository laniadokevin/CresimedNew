@using System.Security.Claims;
@using Cresimed.Core.Entities.ViewModel.Campus
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var userId = User.FindFirst(ClaimTypes.Name).Value;
    var porcCorr = Model.ExamStats.TotalCorrect * 100 / (Model.ExamStats.TotalCount != 0 ? Model.ExamStats.TotalCount : 1);
    var porcIncorr = Model.ExamStats.TotalIncorrect * 100 / (Model.ExamStats.TotalCount != 0 ? Model.ExamStats.TotalCount : 1);
    var listaSpecialties = Model.Percentils.Select(x => x.Specialty.Name).ToList();
    var listaPercentilsValue = Model.Percentils.Select(x => x.Value).ToList();

    TimeSpan t = TimeSpan.FromSeconds(Model.TimeAverageQuestion);

    string average = string.Format("{0:D2}h {1:D2}m {2:D2}s",
    t.Hours,
    t.Minutes,
    t.Seconds,
    t.Milliseconds);

    TimeSpan tt = TimeSpan.FromSeconds(Model.TotalTimeSpent);

    string totalTimee = string.Format("{0:D2}h {1:D2}m {2:D2}s",
    tt.Hours,
    tt.Minutes,
    tt.Seconds,
    tt.Milliseconds);
}
@model StatisticsViewModel

<div class="container ">
    <div class="contaisner ">
        

        <div class="row " style="margin-bottom:20px">
            <div class="col-lg-6 col-12">
                <div class="card">
                    <h5 class="card-header">Rendimiento</h5>
                    <div class="card-body">
                        @if (Model.ExamStats.TotalCorrect > 0 || Model.ExamStats.TotalIncorrect > 0)
                        {
                            <div class="container ">
                                <div class="container ">
                                <br/>
                                    <canvas id="doughnutChart" class="chartjs mx-5 " data-height="00"></canvas>
                                <br/>
                                </div>
                            </div>
                            <ul class="doughnut-legend d-flex justify-content-around ps-0 mb-3 pt-3">
                                <li class="ct-series-2 d-flex flex-column">
                                    <h5 class="mb-0 fw-bold">Incorrectas</h5>
                                    <span class="badge badge-dot my-1 cursor-pointer rounded-pill"
                                      style="background-color:#FF5B5C; width: 35px; height: 6px"></span>
                                    <div class="text-muted">
                                        @Html.Raw(porcIncorr)%
                                    </div>
                                </li>
                                <li class="ct-series-1 d-flex flex-column">
                                    <h5 class="mb-0 fw-bold">Correctas</h5>
                                    <span class="badge badge-dot my-1 cursor-pointer rounded-pill"
                                      style="background-color: #39DA8A; width: 35px; height: 6px"></span>
                                    <div class="text-muted">
                                        @Html.Raw(porcCorr)%

                                    </div>
                                </li>
                            </ul>

                          
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <strong>

                                        @Html.Raw("Aún no hay datos para mostrar")
                                    </strong>
                                </td>


                            </tr>
                        }

                    </div>
                </div>
                <br />

            

            </div>
            <div class="col-lg-6 col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Desempeño con pares</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.PercentilChart.First() > 0)
                        {
                            <div class="card-body" style="margin-bottom:0px">
                                <canvas id="barChart" class="chartjs" height="400"></canvas>
                            </div>
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <strong>

                                        @Html.Raw("Aún no hay datos para mostrar")
                                    </strong>
                                </td>


                            </tr>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row ">
            <div class="col-md">
                <div class="card">
                    <h5 class="card-header">Información de exámenes</h5>
                    <div class="card-body">
                        @if (Model.CantExams > 0)
                        {
                            <table class="table datatables-ajax table table-bordered text-center">

                                <tbody class="table-border-bottom-0">

                                    <tr>

                                        <td>
                                            Examenes Hechos
                                        </td>
                                        <td>
                                            @Html.Raw(Model.CantExams)
                                        </td>

                                    </tr>
                                    <tr>

                                        <td>
                                            Tiempo Total de examenes
                                        </td>
                                        <td>

                                            @Html.Raw(totalTimee)
                                        </td>

                                    </tr>
                                    <tr>

                                        <td>
                                            Tiempo Promedio por Pregunta
                                        </td>
                                        <td>
                                            @Html.Raw(average)
                                        </td>

                                    </tr>

                                </tbody>

                            </table>
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <strong>

                                        @Html.Raw("Aún no hay datos para mostrar")
                                    </strong>
                                </td>


                            </tr>
                        }

                    </div>

                </div>
                <br />
                @*

                <div class="card">
                    <h5 class="card-header">Especialidades</h5>
                    <div class="card-body">
                        @if (Model.Percentils.Count() > 0)
                        {
                            <div id="radarChart"></div>
                        }
                        else
                        {
                            <tr>
                                <td>
                                    <strong>

                                        @Html.Raw("Aún no hay datos para mostrar")
                                    </strong>
                                </td>


                            </tr>
                        }

                    </div>
                </div>
                <br />
                *@

                <div class="card mb-4">
                    <h5 class="card-header">Especialidades</h5>
                    <div class="table-responsive text-nowrap">
                        <table class="table datatables-ajax table table-bordered text-center">
                            @if (Model.ExamStats.CountBySpecialties.Count() > 0)
                            {
                                <thead>
                                    <tr>
                                        <th>
                                            Especialidad
                                        </th>
                                        <th>
                                            Puntaje
                                        </th>
                                        <th>
                                            Correctas
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="table-border-bottom-0">
                                    @for (var i = 0; i < Model.ExamStats.CountBySpecialties.Count(); i++)
                                    {
                                        decimal corr = Model.ExamStats.CountBySpecialties[i].Corrects;
                                        decimal tot = Model.ExamStats.CountBySpecialties[i].Incorrects + Model.ExamStats.CountBySpecialties[i].Corrects;
                                        double div = Math.Round(((float)corr / (float)tot) * 100);

                                        <tr>

                                            <td>
                                                @Html.Raw(Model.ExamStats.CountBySpecialties[i].Name)
                                            </td>
                                            <td class="text-center">
                                                <span>
                                                    @Html.Raw(div + "%")
                                                </span>
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-between">
                                                </div>
                                                <div class="progress mb-1">
                                                    <div class="progress-bar bg-success"
                                                 role="progressbar"
                                                 style="width: @(div)%"
                                                 aria-valuenow="@(div)"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                                        @Html.Raw("<span>"+corr+"</span>")
                                                    </div>
                                                    <div class="progress-bar bg-danger"
                                                 role="progressbar"
                                                 style="width: @(100 - div)%"
                                                 aria-valuenow="@(100 - div)"
                                                 aria-valuemin="0"
                                                 aria-valuemax="100">
                                                        @Html.Raw("<span>" + tot + "</span>")
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            }
                            else
                            {
                                <tbody class="table-border-bottom-0">
                                    <tr>
                                        <td colspan="4">
                                            @Html.Raw("Aún no hay datos para mostrar")
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>


@section Scripts {

    <!-- endbuild -->
    <!-- Vendors JS -->
    <script src="../../assets/vendor/libs/chartjs/chartjs.js"></script>
    <script src="../../assets/vendor/libs/apex-charts/apexcharts.js"></script>


    <script>

            'use strict';

            (function () {
                 const purpleColor = '#836AF9',
                yellowColor = '#ffe800',
                redColor = '#FF5B5C',
                greenColor = '#39DA8A', 
                cyanColor = '#28dac6',
                orangeColor = '#FF8132',
                orangeLightColor = '#FDAC34',
                oceanBlueColor = '#299AFF',
                greyColor = '#4F5D70',
                greyLightColor = '#EDF1F4',
                blueColor = '#2B9AFF',
                blueLightColor = '#84D0FF';

                let cardColor, headingColor, labelColor, borderColor, legendColor, radialTrackColor;

                if (isDarkStyle) {
                    cardColor = config.colors_dark.cardColor;
                    headingColor = config.colors_dark.headingColor;
                    labelColor = config.colors_dark.textMuted;
                    legendColor = config.colors_dark.bodyColor;
                    borderColor = config.colors_dark.borderColor;
                    radialTrackColor = '#36435C';
                } else {
                    cardColor = config.colors.cardColor;
                    headingColor = config.colors.headingColor;
                    labelColor = config.colors.textMuted;
                    legendColor = config.colors.bodyColor;
                    borderColor = config.colors.borderColor;
                    radialTrackColor = config.colors_label.secondary;
                }

            // Set height according to their data-height
            // --------------------------------------------------------------------
            const chartList = document.querySelectorAll('.chartjs');
            chartList.forEach(function (chartListItem) {
                chartListItem.height = 350;
            });
                // Color constant
                const chartColors = {
                    column: {
                        series1: '#826af9',
                        series2: '#d2b0ff',
                        bg: '#f8d3ff'
                    },
                    donut: {
                        series1: '#fee802',
                        series2: '#3fd0bd',
                        series3: '#826bf8',
                        series4: '#2b9bf4'
                    },
                    area: {
                        series1: '#29dac7',
                        series2: '#60f2ca',
                        series3: '#a5f8cd'
                    }
                };
                // Doughnut Chart
            // --------------------------------------------------------------------

            const doughnutChart = document.getElementById('doughnutChart');
            if (doughnutChart) {
                const doughnutChartVar = new Chart(doughnutChart, {
                    type: 'pie',
                    data: {
                        labels: ["Correctas", "Incorrectas"],// JSON.parse(nombresEspecialidades),
                        datasets: [
                            {
                                data: [@Model.ExamStats.TotalCorrect, @Model.ExamStats.TotalIncorrect],//JSON.parse(correctas),
                                backgroundColor: [greenColor, redColor],
                                borderWidth: 0,
                                pointStyle: 'rectRounded'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        animation: {
                            duration: 2000
                        },
                        cutout: '0%',
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const label = context.label || '',
                                            value = context.parsed;
                                        const output = ' ' + label + ' : ' + value + ' ';
                                        return output;
                                    }
                                },
                                // Updated default tooltip UI
                                rtl: isRtl,
                                backgroundColor: cardColor,
                                titleColor: headingColor,
                                bodyColor: legendColor,
                                borderWidth: 1,
                                borderColor: borderColor
                            }
                        }
                    }
                });
            }
            var nombresEspecialidades = '[@foreach (var e in Model.ExamStats.CountBySpecialties)
        {
            var last = Model.ExamStats.CountBySpecialties.Last();
            if (last.Name == e.Name)
                @Html.Raw('"'+e.Name+'"')
            else
                @Html.Raw('"'+e.Name+'"' + ",")
            ;
        }]';
            var correctas = '[@foreach (var e in Model.ExamStats.CountBySpecialties)
        {
            var last = Model.ExamStats.CountBySpecialties.Last();
            if (last.Name == e.Name)
                @Html.Raw(e.Corrects)
            else
                @Html.Raw(e.Corrects + ",")
            ;
        }]';

                // Bar Chart
                // --------------------------------------------------------------------
          
                const barChart = document.getElementById('barChart');
                if (barChart) {
                const barChartVar = new Chart(barChart, {
                    type: 'bar',
                    data: {
                        labels: [
                            'Yo',
                            'Promedio'
                        ],
                        datasets: [
                            {
                                data: [@Model.PercentilChart.ToArray()[0].ToString().Replace(",","."), @Model.PercentilChart.ToArray()[1].ToString().Replace(",",".")],
                                backgroundColor: cyanColor,
                                borderColor: 'transparent',
                                maxBarThickness: 45,
                                borderRadius: {
                                    topRight: 0,
                                    topLeft: 0
                                }
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 2000
                        },
                        plugins: {
                            tooltip: {
                                rtl: isRtl,
                                backgroundColor: cardColor,
                                titleColor: headingColor,
                                bodyColor: legendColor,
                                borderWidth: 1,
                                borderColor: borderColor
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    color: borderColor,
                                    drawBorder: false,
                                    borderColor: borderColor
                                },
                                ticks: {
                                    color: labelColor
                                }
                            },
                            y: {
                                min: 0,
                                max: 100,
                                grid: {
                                    color: borderColor,
                                    drawBorder: false,
                                    borderColor: borderColor
                                },
                                ticks: {
                                    stepSize: 100,
                                    color: labelColor
                                }
                            }
                        }
                    }
                });
            }

                @*
                // Radar Chart
                // --------------------------------------------------------------------
                const radarChartEl = document.querySelector('#radarChart'),
                    radarChartConfig = {
                        chart: {
                            height: 500,
                            fontFamily: 'IBM Plex Sans',
                            type: 'radar',
                            toolbar: {
                                show: false
                            },
                            dropShadow: {
                                enabled: false,
                                blur: 8,
                                left: 1,
                                top: 1,
                                opacity: 0.2
                            }
                        },
                        legend: {
                            show: true,
                            position: 'bottom',
                            labels: {
                                colors: legendColor,
                                useSeriesColors: false
                            }
                        },
                        plotOptions: {
                            radar: {
                                polygons: {
                                    strokeColors: borderColor,
                                    connectorColors: borderColor
                                }
                            }
                        },
                        yaxis: {
                            show: false
                        },
                        series: [
                            {
                                name: 'Yo',
                                data: @Html.Raw("[")
                                        @for (var i = 0; i < listaPercentilsValue.Count(); i++)
                                        {
                                            @Html.Raw(" '")
                                            @Html.Raw(listaPercentilsValue[i])
                                            @Html.Raw("'")
                                            if (i != listaPercentilsValue.Count() - 1)
                                                @Html.Raw(",")
                                            
                                        }
                                        @Html.Raw("]"),
                            }
                        ],
                        colors: [chartColors.donut.series1, chartColors.donut.series3],
                        xaxis: {
                            categories:
                                        @Html.Raw("[")
                                        @for (var i = 0; i < listaSpecialties.Count(); i++)
                                        {
                                            @Html.Raw(" '")
                                            ;
                                            @Html.Raw(listaSpecialties[i])
                                            ;
                                            @Html.Raw("'")
                                            ;
                                            if (i != listaSpecialties.Count() - 1)
                                                @Html.Raw(",")
                                            ;

                                        }
                                        @Html.Raw("]"),
                            labels: {
                                show: true,
                                style: {
                                    colors: [labelColor, labelColor, labelColor, labelColor, labelColor, labelColor, labelColor, labelColor],
                                    fontSize: '13px',
                                    fontFamily: 'IBM Plex Sans'
                                }
                            }
                        },
                        fill: {
                            opacity: [1, 0.8]
                        },
                        stroke: {
                            show: false,
                            width: 0
                        },
                        markers: {
                            size: 0
                        },
                        grid: {
                            show: false,
                            padding: {
                                top: -20,
                                bottom: -20
                            }
                        }
                    };
                if (typeof radarChartEl !== undefined && radarChartEl !== null) {
                    const radarChart = new ApexCharts(radarChartEl, radarChartConfig);
                    radarChart.render();
                }
                *@



            })();
        </script>

}